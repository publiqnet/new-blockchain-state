<?php
/**
 * Created by PhpStorm.
 * User: Grigor
 * Date: 3/22/19
 * Time: 5:23 PM
 */

namespace App\Repository;

use App\Entity\Account;
use App\Entity\Publication;
use App\Entity\PublicationMember;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPublications(int $count = 10, Publication $publication = null)
    {
        if ($publication) {
            return $this->createQueryBuilder('p')
                ->select('p')
                ->where('p.id < :id')
                ->setParameters(['id' => $publication->getId()])
                ->orderBy('p.id', 'DESC')
                ->setMaxResults($count)
                ->getQuery()
                ->getResult();
        } else {
            return $this->createQueryBuilder('p')
                ->select('p')
                ->orderBy('p.id', 'DESC')
                ->setMaxResults($count)
                ->getQuery()
                ->getResult();
        }
    }

    public function getUserPublicationsOwner(Account $account)
    {
        return $this->createQueryBuilder('p')
            ->select('p, pm.status as memberStatus')
            ->innerJoin('p.members', 'pm')
            ->where('pm.member = :member')
            ->andWhere('pm.status = :status')
            ->setParameters(['member' => $account, 'status' => PublicationMember::TYPES['owner']])
            ->orderBy('p.id', 'DESC')
            ->getQuery()
            ->getResult('AGGREGATES_HYDRATOR');
    }

    public function getUserPublicationsMember(Account $account)
    {
        return $this->createQueryBuilder('p')
            ->select('p, pm.status as memberStatus')
            ->innerJoin('p.members', 'pm')
            ->where('pm.member = :member')
            ->andWhere('pm.status in (:status)')
            ->setParameters(['member' => $account, 'status' => [PublicationMember::TYPES['editor'], PublicationMember::TYPES['contributor']]])
            ->orderBy('p.id', 'DESC')
            ->getQuery()
            ->getResult('AGGREGATES_HYDRATOR');
    }

    public function getUserPublicationsInvitations(Account $account)
    {
        return $this->createQueryBuilder('p')
            ->select('p, pm.status as memberStatus')
            ->innerJoin('p.members', 'pm')
            ->where('pm.member = :member')
            ->andWhere('pm.status in (:status)')
            ->setParameters(['member' => $account, 'status' => [PublicationMember::TYPES['invited_editor'], PublicationMember::TYPES['invited_contributor']]])
            ->orderBy('p.id', 'DESC')
            ->getQuery()
            ->getResult('AGGREGATES_HYDRATOR');
    }

    public function getUserPublicationsRequests(Account $account)
    {
        return $this->createQueryBuilder('p')
            ->select('p, pm.status as memberStatus')
            ->innerJoin('p.members', 'pm')
            ->where('pm.member = :member')
            ->andWhere('pm.status = :status')
            ->setParameters(['member' => $account, 'status' => PublicationMember::TYPES['requested_contributor']])
            ->orderBy('p.id', 'DESC')
            ->getQuery()
            ->getResult('AGGREGATES_HYDRATOR');
    }

    public function getUserSubscriptions(Account $user)
    {
        return $this->createQueryBuilder('p')
            ->select('p')
            ->join('p.subscribers', 's')
            ->where('s.subscriber = :user')
            ->setParameters(['user' => $user])
            ->getQuery()
            ->getResult();
    }

    public function fulltextSearch($searchWord, $count = 5, Publication $publication = null)
    {
        if ($publication) {
            return $this->createQueryBuilder('p')
                ->select("p")
                ->leftJoin('p.tags', 't')
                ->where('MATCH_AGAINST(p.title, p.description, :searchWord \'IN BOOLEAN MODE\') > 0')
                ->orWhere('t.name like :tagSearchWord')
                ->andWhere('p.id < :id')
                ->setParameters(['id' => $publication->getId(), 'searchWord' => $searchWord, 'tagSearchWord' => '%' . $searchWord . '%'])
                ->setMaxResults($count)
                ->orderBy('p.id', 'DESC')
                ->getQuery()
                ->getResult();
        } else {
            return $this->createQueryBuilder('p')
                ->select("p")
                ->leftJoin('p.tags', 't')
                ->where('MATCH_AGAINST(p.title, p.description, :searchWord \'IN BOOLEAN MODE\') > 0')
                ->orWhere('t.name like :tagSearchWord')
                ->setParameters(['searchWord' => $searchWord, 'tagSearchWord' => '%' . $searchWord . '%'])
                ->setMaxResults($count)
                ->orderBy('p.id', 'DESC')
                ->getQuery()
                ->getResult();
        }
    }

    public function getPopularPublications($count = 5)
    {
        return $this->createQueryBuilder('p')
            ->select("p, SUM(cu.views) as totalViews")
            ->leftJoin('p.contentUnits', 'cu')
            ->setMaxResults($count)
            ->groupBy('p')
            ->orderBy('totalViews', 'DESC')
            ->getQuery()
            ->getResult('AGGREGATES_HYDRATOR');
    }

    public function getTrendingPublications($count = 18)
    {
        $timezone = new \DateTimeZone('UTC');
        $date = new \DateTime();
        $date->setTimezone($timezone);

        return $this->createQueryBuilder('p')
            ->select("p, SUM(vpc.viewsCount) as totalViews")
            ->join('p.contentUnits', 'cu')
            ->join('cu.viewsPerChannel', 'vpc')
            ->where('vpc.viewsTime > :currentTimestamp')
            ->setParameters(['currentTimestamp' => $date->getTimestamp() - 7 * 86400])
            ->setMaxResults($count)
            ->groupBy('p')
            ->orderBy('totalViews', 'DESC')
            ->getQuery()
            ->getResult('AGGREGATES_HYDRATOR');
    }

    public function getUserRecommendedPublications(Account $user, $count = 5)
    {
        $subscriptionQuery = $this->getEntityManager()
            ->createQuery("
                select p1
                from App:Publication p1 
                join App:Subscription s with s.publication = p1
                where s.subscriber = :user
            ");

        $memberQuery = $this->getEntityManager()
            ->createQuery("
                select p2
                from App:Publication p2 
                join App:PublicationMember m with m.publication = p2
                where m.member = :user
            ");

        $authorPreferenceQuery = $this->getEntityManager()
            ->createQuery("
                select a2 
                from App:Account a2 
                join App:UserPreference up with a2 = up.author
                where up.account = :user and up.author is not null
            ");

        $tagPreferenceQuery = $this->getEntityManager()
            ->createQuery("
                select cu3
                from App:ContentUnit cu3 
                join App:ContentUnitTag cut with cut.contentUnit = cu3
                where cut.tag in (select tg from App:Tag tg join App:UserPreference up1 with up1.tag = tg where up1.account = :user and up1.tag is not null) 
                group by cu3.id
            ");

        $query = $this->createQueryBuilder('p');
        return $query->select("p")
            ->join('p.contentUnits', 'cu')
            ->where($query->expr()->in('cu.author', $authorPreferenceQuery->getDQL()))
            ->orWhere($query->expr()->in('cu', $tagPreferenceQuery->getDQL()))
            ->andWhere($query->expr()->notIn('p', $subscriptionQuery->getDQL()))
            ->andWhere($query->expr()->notIn('p', $memberQuery->getDQL()))
            ->setParameter('user', $user)
            ->setMaxResults($count)
            ->orderBy('p.id', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return array|null
     */
    public function getPublicationsSummary()
    {
        return $this->createQueryBuilder('p')
            ->select('count(p) as totalPublications')
            ->getQuery()
            ->getResult();
    }
}