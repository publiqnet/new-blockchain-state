<?php
/**
 * Created by PhpStorm.
 * User: Grigor
 * Date: 3/22/19
 * Time: 5:23 PM
 */

namespace App\Repository;

use App\Entity\Account;
use App\Entity\PublicationMember;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationRepository extends \Doctrine\ORM\EntityRepository
{
    public function getUserPublicationsOwner(Account $account)
    {
        return $this->createQueryBuilder('p')
            ->select('p')
            ->innerJoin('p.members', 'pm')
            ->where('pm.member = :member')
            ->andWhere('pm.status = :status')
            ->setParameters(['member' => $account, 'status' => PublicationMember::TYPES['owner']])
            ->orderBy('p.id', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function getUserPublicationsMember(Account $account)
    {
        return $this->createQueryBuilder('p')
            ->select('p, pm.status as memberStatus')
            ->innerJoin('p.members', 'pm')
            ->where('pm.member = :member')
            ->andWhere('pm.status in (:status)')
            ->setParameters(['member' => $account, 'status' => [PublicationMember::TYPES['editor'], PublicationMember::TYPES['contributor']]])
            ->orderBy('p.id', 'DESC')
            ->getQuery()
            ->getResult('AGGREGATES_HYDRATOR');
    }

    public function getUserPublicationsInvitations(Account $account)
    {
        return $this->createQueryBuilder('p')
            ->select('p, pm.status as memberStatus')
            ->innerJoin('p.members', 'pm')
            ->where('pm.member = :member')
            ->andWhere('pm.status in (:status)')
            ->setParameters(['member' => $account, 'status' => [PublicationMember::TYPES['invited_editor'], PublicationMember::TYPES['invited_contributor']]])
            ->orderBy('p.id', 'DESC')
            ->getQuery()
            ->getResult('AGGREGATES_HYDRATOR');
    }

    public function getUserPublicationsRequests(Account $account)
    {
        return $this->createQueryBuilder('p')
            ->select('p, pm.status as memberStatus')
            ->innerJoin('p.members', 'pm')
            ->where('pm.member = :member')
            ->andWhere('pm.status = :status')
            ->setParameters(['member' => $account, 'status' => PublicationMember::TYPES['requested_contributor']])
            ->orderBy('p.id', 'DESC')
            ->getQuery()
            ->getResult('AGGREGATES_HYDRATOR');
    }
}