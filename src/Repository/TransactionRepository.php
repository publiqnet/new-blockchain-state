<?php
/**
 * Created by PhpStorm.
 * User: Grigor
 * Date: 11/4/19
 * Time: 2:13 PM
 */

namespace App\Repository;

use App\Entity\Account;
use App\Entity\Block;
use App\Entity\Transaction;
use Doctrine\ORM\EntityRepository;
use PubliqAPI\Base\Rtt;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{
    /**
     * @param Transaction|null $transaction
     * @param int $count
     * @return array|null
     */
    public function getTransactions(Transaction $transaction = null, $count = 10)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t, b, tr')
            ->leftJoin('t.block', 'b')
            ->leftJoin('t.transfer', 'tr')
            ->leftJoin('t.file', 'f')
            ->leftJoin('t.contentUnit', 'cu')
            ->leftJoin('t.content', 'c')
        ;

        if ($transaction) {
            $query->andWhere('t.id < :id');
            $query->setParameters(['id' => $transaction->getId()]);
        }

        $result = $query->setMaxResults($count)
            ->orderBy('t.timeSigned', 'desc')
            ->getQuery()
            ->getResult();

        return $result;
    }

    /**
     * @param Account $account
     * @param Transaction|null $transaction
     * @param int $count
     * @param null $rtt
     * @return array|null
     */
    public function getAccountTransactions(Account $account, Transaction $transaction = null, $count = 10, $rtt = null)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t')
            ->leftJoin('t.transfer', 'tr')
            ->leftJoin('t.file', 'f')
            ->leftJoin('t.contentUnit', 'cu')
            ->leftJoin('t.content', 'c')
            ->leftJoin('t.boostedContentUnit', 'bcu')
            ->leftJoin('t.cancelBoostedContentUnit', 'cbcu')
            ->leftJoin('t.role', 'r')
            ->leftJoin('t.serviceStatistic', 'ss')
            ->leftJoin('t.storageUpdate', 'su')
            ->where('tr.from = :account')
            ->orWhere('tr.to = :account')
            ->orWhere('f.author = :account')
            ->orWhere('cu.author = :account')
            ->orWhere('c.channel = :account')
        ;

        if ($rtt !== null) {
            switch ($rtt) {
                case array_search('File', Rtt::types):
                    $query->andWhere('f is not null');
                    break;
                case array_search('ContentUnit', Rtt::types):
                    $query->andWhere('cu is not null');
                    break;
                case array_search('Content', Rtt::types):
                    $query->andWhere('c is not null');
                    break;
                case array_search('Transfer', Rtt::types):
                    $query->andWhere('tr is not null');
                    break;
                case array_search('SponsorContentUnit', Rtt::types):
                    $query->andWhere('bcu is not null');
                    break;
                case array_search('CancelSponsorContentUnit', Rtt::types):
                    $query->andWhere('cbcu is not null');
                    break;
                case array_search('Role', Rtt::types):
                    $query->andWhere('r is not null');
                    break;
                case array_search('ServiceStatistics', Rtt::types):
                    $query->andWhere('ss is not null');
                    break;
                case array_search('StorageUpdate', Rtt::types):
                    $query->andWhere('su is not null');
                    break;
            }
        }

        if ($transaction) {
            $query->andWhere('t.id < :id');
            $query->setParameters(['id' => $transaction->getId(), 'account' => $account]);
        } else {
            $query->setParameter('account', $account);
        }

        $result = $query->setMaxResults($count)
            ->orderBy('t.timeSigned', 'desc')
            ->getQuery()
            ->getResult();

        return $result;
    }

    /**
     * @param Account $account
     * @return array|null
     */
    public function getAccountUnconfirmedTransactions(Account $account)
    {
        return $this->createQueryBuilder('t')
            ->select('t')
            ->where('t.to = :account')
            ->orWhere('t.from = :account')
            ->andWhere('t.block IS NULL')
            ->setParameters(['account' => $account])
            ->orderBy('t.id', 'desc')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param int $from
     * @param int $count
     * @param null $account
     * @return array|null
     */
    public function getAllConfirmedTransactions($from, $count, $account = null)
    {
        if ($account instanceof Account) {
            return $this->createQueryBuilder('t')
                ->select('t, fU, tU')
                ->join('t.to', 'tU')
                ->leftJoin('t.from', 'fU')
                ->where('t.from = :account')
                ->orWhere('t.to = :account')
                ->andWhere('t.from IS NOT NULL')
                ->orderBy('t.id', 'desc')
                ->setParameter('account', $account)
                ->setFirstResult($from)
                ->setMaxResults($count)
                ->getQuery()
                ->getResult();
        } else {
            return $this->createQueryBuilder('t')
                ->select('t, fU, tU')
                ->join('t.to', 'tU')
                ->leftJoin('t.from', 'fU')
                ->where('t.from IS NOT NULL')
                ->orderBy('t.id', 'desc')
                ->setFirstResult($from)
                ->setMaxResults($count)
                ->getQuery()
                ->getResult();
        }
    }

    /**
     * @param Block $block
     * @param int $from
     * @param int $count
     * @param null $rtt
     * @return array|null
     */
    public function getBlockTransactions(Block $block, int $from, int $count, $rtt = null)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t')
            ->leftJoin('t.transfer', 'tr')
            ->leftJoin('t.file', 'f')
            ->leftJoin('t.contentUnit', 'cu')
            ->leftJoin('t.content', 'c')
            ->leftJoin('t.boostedContentUnit', 'bcu')
            ->leftJoin('t.cancelBoostedContentUnit', 'cbcu')
            ->leftJoin('t.role', 'r')
            ->leftJoin('t.serviceStatistic', 'ss')
            ->leftJoin('t.storageUpdate', 'su')
            ->where('t.block = :block')
        ;

        if ($rtt !== null) {
            switch ($rtt) {
                case array_search('File', Rtt::types):
                    $query->andWhere('f is not null');
                    break;
                case array_search('ContentUnit', Rtt::types):
                    $query->andWhere('cu is not null');
                    break;
                case array_search('Content', Rtt::types):
                    $query->andWhere('c is not null');
                    break;
                case array_search('Transfer', Rtt::types):
                    $query->andWhere('tr is not null');
                    break;
                case array_search('SponsorContentUnit', Rtt::types):
                    $query->andWhere('bcu is not null');
                    break;
                case array_search('CancelSponsorContentUnit', Rtt::types):
                    $query->andWhere('cbcu is not null');
                    break;
                case array_search('Role', Rtt::types):
                    $query->andWhere('r is not null');
                    break;
                case array_search('ServiceStatistics', Rtt::types):
                    $query->andWhere('ss is not null');
                    break;
                case array_search('StorageUpdate', Rtt::types):
                    $query->andWhere('su is not null');
                    break;
            }
        }

        return $query->setParameter('block', $block)
            ->orderBy('t.id', 'desc')
            ->setFirstResult($from)
            ->setMaxResults($count)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Block $block
     * @return array|null
     */
    public function getBlockTransactionsSummary(Block $block)
    {
        return $this->createQueryBuilder('t')
            ->select('COUNT(t) as transactionsCount, SUM(t.whole) as totalWhole, SUM(t.fraction) as totalFraction')
            ->where('t.block = :block')
            ->andWhere('t.from IS NOT NULL')
            ->setParameter('block', $block)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Block $block
     * @param string $rewardType
     * @return array|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getBlockReward(Block $block, string $rewardType)
    {
        return $this->createQueryBuilder('t')
            ->select('t, fU, tU')
            ->join('t.to', 'tU')
            ->leftJoin('t.from', 'fU')
            ->where('t.block = :block')
            ->andWhere('t.rewardType = :rewardType')
            ->setParameters(['block' => $block, 'rewardType' => $rewardType])
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Block $block
     * @return array|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getBlockFeeSummary(Block $block)
    {
        return $this->createQueryBuilder('t')
            ->select('SUM(t.feeWhole) as totalFeeWhole, SUM(t.feeFraction) as totalFeeFraction')
            ->where('t.block = :block')
            ->setParameters(['block' => $block])
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Account $account
     * @return array|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAccountFeeRewardSummary(Account $account)
    {
        return $this->createQueryBuilder('t')
            ->select('SUM(t.feeWhole) as totalWhole, SUM(t.feeFraction) as totalFraction')
            ->join('t.block', 'b')
            ->where('b.account = :user')
            ->setParameters(['user' => $account])
            ->getQuery()
            ->getOneOrNullResult();
    }
}