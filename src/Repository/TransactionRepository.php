<?php
/**
 * Created by PhpStorm.
 * User: grigor
 * Date: 9/25/18
 * Time: 12:29 PM
 */

namespace App\Repository;

use App\Entity\Account;
use App\Entity\Block;
use App\Entity\Transaction;
use Doctrine\ORM\EntityRepository;
use PubliqAPI\Base\RewardType;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{
    /**
     * @param Account $account
     * @param Transaction|null $transaction
     * @param int $count
     * @param string $order
     * @return array|null
     */
    public function getAccountTransactions(Account $account, string $order, Transaction $transaction = null, $count = 10)
    {
        $query = $this->createQueryBuilder('t')
            ->select('t')
            ->where('t.to = :account')
            ->orWhere('t.from = :account')
            ->andWhere('t.from IS NOT NULL');

        if ($transaction) {
            if ($order == 'asc') {
                $query->andWhere('t.id > :id');
            } else {
                $query->andWhere('t.id < :id');
            }

            $query->setParameters(['id' => $transaction->getId(), 'account' => $account]);
        } else {
            $query->setParameter('account', $account);
        }

        $result = $query->setMaxResults($count)
            ->orderBy('t.id', $order)
            ->getQuery()
            ->getResult();

        return $result;
    }

    /**
     * @param Account $account
     * @return array|null
     */
    public function getAccountUnconfirmedTransactions(Account $account)
    {
        return $this->createQueryBuilder('t')
            ->select('t')
            ->where('t.to = :account')
            ->orWhere('t.from = :account')
            ->andWhere('t.block IS NULL')
            ->setParameters(['account' => $account])
            ->orderBy('t.id', 'desc')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param int $from
     * @param int $count
     * @param null $account
     * @return array|null
     */
    public function getAllConfirmedTransactions($from, $count, $account = null)
    {
        if ($account instanceof Account) {
            return $this->createQueryBuilder('t')
                ->select('t, fU, tU')
                ->join('t.to', 'tU')
                ->leftJoin('t.from', 'fU')
                ->where('t.from = :account')
                ->orWhere('t.to = :account')
                ->andWhere('t.from IS NOT NULL')
                ->orderBy('t.id', 'desc')
                ->setParameter('account', $account)
                ->setFirstResult($from)
                ->setMaxResults($count)
                ->getQuery()
                ->getResult();
        } else {
            return $this->createQueryBuilder('t')
                ->select('t, fU, tU')
                ->join('t.to', 'tU')
                ->leftJoin('t.from', 'fU')
                ->where('t.from IS NOT NULL')
                ->orderBy('t.id', 'desc')
                ->setFirstResult($from)
                ->setMaxResults($count)
                ->getQuery()
                ->getResult();
        }
    }

    /**
     * @param Block $block
     * @param string $rewardType
     * @return array|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getBlockReward(Block $block, string $rewardType)
    {
        return $this->createQueryBuilder('t')
            ->select('t, fU, tU')
            ->join('t.to', 'tU')
            ->leftJoin('t.from', 'fU')
            ->where('t.block = :block')
            ->andWhere('t.rewardType = :rewardType')
            ->setParameters(['block' => $block, 'rewardType' => $rewardType])
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Block $block
     * @return array|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getBlockFeeSummary(Block $block)
    {
        return $this->createQueryBuilder('t')
            ->select('SUM(t.feeWhole) as totalWhole, SUM(t.feeFraction) as totalFraction')
            ->where('t.block = :block')
            ->setParameters(['block' => $block])
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Account $account
     * @return array|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAccountMinerRewardSummary(Account $account)
    {
        return $this->createQueryBuilder('t')
            ->select('SUM(t.whole) as totalWhole, SUM(t.fraction) as totalFraction')
            ->where('t.to = :user')
            ->andWhere('t.rewardType = :rewardType')
            ->setParameters(['user' => $account, 'rewardType' => RewardType::miner])
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Account $account
     * @return array|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAccountFeeRewardSummary(Account $account)
    {
        return $this->createQueryBuilder('t')
            ->select('SUM(t.feeWhole) as totalWhole, SUM(t.feeFraction) as totalFraction')
            ->join(Transaction::class, 't1', 'WITH', 't1.block = t.block')
            ->where('t1.to = :user')
            ->andWhere('t1.rewardType = :rewardType')
            ->setParameters(['user' => $account, 'rewardType' => RewardType::miner])
            ->getQuery()
            ->getOneOrNullResult();
    }
}