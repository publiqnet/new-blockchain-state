# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    channel_address: '%env(CHANNEL_ADDRESS)%'
    channel_private_key: '%env(CHANNEL_PRIVATE_KEY)%'
    channel_storage_endpoint: '%env(CHANNEL_STORAGE_ENDPOINT)%'
    locale: 'en'
    thumbnail_path: 'uploads/thumbnails'
    publications_path: 'uploads/publications'
    accounts_path: 'uploads/accounts'
    social_path: 'uploads/social'
    draft_path: 'uploads/draft'
    socialAssetsPath: 'socialAssets'
    json_path: '../public/jsons/'
    router.request_context.host: '%env(MAIN_DOMAIN_HOST)%'
    router.request_context.scheme: '%env(MAIN_DOMAIN_SCHEME)%'
    backend_endpoint: '%env(BACKEND_ENDPOINT)%'
    frontend_endpoint: '%env(FRONTEND_ENDPOINT)%'
    mercure_token: '%env(MERCURE_JWT_TOKEN)%'
    mercure_secret_key: '%env(MERCURE_JWT_SECRET)%'
    environment: '%env(APP_ENV)%'
    focccus_channels_addresses: '%env(FOCCCUS_CHANNELS_ADDRESSES)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    app_exception_subscriber:
        class: App\EventSubscriber\ExceptionSubscriber
        tags:
            - { name: kernel.event_subscriber }
        autowire: true

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Service\BlockChain:
        arguments: ['@doctrine.orm.entity_manager', '%env(STATE_ENDPOINT)%', '%env(BROADCAST_ENDPOINT)%', '%env(CHANNEL_ENDPOINT)%', '%env(CHANNEL_STORAGE_ENDPOINT)%', '%env(DETECT_LANGUAGE_ENDPOINT)%', '%env(DETECT_KEYWORDS_ENDPOINT)%', '%env(CHANNEL_STORAGE_ORDER_ENDPOINT)%', '%env(CHANNEL_PRIVATE_KEY)%', '%env(CHANNEL_ADDRESS)%']

    App\Service\Oauth:
        arguments: ['%env(OAUTH_ENDPOINT)%']

    App\Service\ContentUnit:
        arguments: ['@doctrine.orm.entity_manager', '%env(CHANNEL_ADDRESS)%', '%env(BACKEND_ENDPOINT)%']

    App\Service\Custom:
        arguments: ['@doctrine.orm.entity_manager', '%env(OLD_BACKEND_ENDPOINT)%', '%socialAssetsPath%', '%social_path%', '%thumbnail_path%', '%env(CHANNEL_STORAGE_ENDPOINT)%', '%env(FRONTEND_ENDPOINT)%', '%env(FB_CLIENT_ID)%', '%env(FB_CLIENT_SECRET)%']

    App\Service\UserNotification:
        arguments: ['@doctrine.orm.entity_manager', '@serializer', '%env(MERCURE_PUBLISH_URL)%', '%env(MERCURE_JWT_SECRET)%']

    json:
        class: App\Service\Json
        arguments: ['@doctrine.orm.entity_manager', '%json_path%']
        public: true

    # SONATA ADMIN
    admin.dictionary:
        class: App\Admin\DictionaryAdmin
        arguments: [~, App\Entity\Dictionary, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Dictionary, group: Settings }
        public: true
    admin.channel:
        class: App\Admin\ChannelAdmin
        arguments: [~, App\Entity\Account, App\Controller\Admin\ChannelController, 'channel']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Channels, group: Stats }
        public: true
    admin.storage:
        class: App\Admin\StorageAdmin
        arguments: [~, App\Entity\Account, ~, 'storage']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Storages, group: Stats }
        public: true
    admin.account:
        class: App\Admin\AccountAdmin
        arguments: [~, App\Entity\Account, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Users, group: Stats }
        public: true
    admin.publication:
        class: App\Admin\PublicationAdmin
        arguments: [~, App\Entity\Publication, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Publications, group: Stats }
        public: true
    admin.stats:
        class: App\Admin\StatsAdmin
        arguments: [~, ~, App\Controller\Admin\StatsController]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Statistics, group: Stats }
        public: true
