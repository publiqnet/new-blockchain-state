# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    channel_address: '%env(CHANNEL_ADDRESS)%'
    locale: 'en'
    json_path: '../public/jsons/'
    network_file_path: 'uploads/network'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    app_exception_subscriber:
        class: App\EventSubscriber\ExceptionSubscriber
        tags:
            - { name: kernel.event_subscriber }
        autowire: true

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Service\BlockChain:
        arguments: ['%env(STATE_ENDPOINT)%', '%env(CHANNEL_ENDPOINT)%', '%env(CHANNEL_STORAGE_ORDER_ENDPOINT)%', '%env(CHANNEL_PRIVATE_KEY)%']

    App\Service\Custom:
        arguments: ['@doctrine.orm.entity_manager']

    json:
        class: App\Service\Json
        arguments: ['@doctrine.orm.entity_manager', '%json_path%']
        public: true

    # SONATA ADMIN
    admin.dictionary:
        class: App\Admin\DictionaryAdmin
        arguments: [~, App\Entity\Dictionary, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Dictionary, group: Settings }
        public: true
    admin.networkhomeslider:
        class: App\Admin\NetworkHomeSliderAdmin
        arguments: [~, App\Entity\NetworkHomeSlider, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Slider, group: Home }
        public: true
    admin.networkhomecontent:
        class: App\Admin\NetworkHomeContentAdmin
        arguments: [~, App\Entity\NetworkHomeContent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Contents, group: Home }
        public: true
    admin.networkpagepbq:
        class: App\Admin\NetworkPageAdmin
        arguments: [~, App\Entity\NetworkPage, ~, 'pbq']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Main, group: PBQ }
        public: true
    admin.networkpbqcontent:
        class: App\Admin\NetworkPbqContentAdmin
        arguments: [~, App\Entity\NetworkPbqContent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Contents, group: PBQ }
        public: true
    admin.networkpagepubliq:
        class: App\Admin\NetworkPageAdmin
        arguments: [~, App\Entity\NetworkPage, ~, 'publiq']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Main, group: PUBLIQ }
        public: true
    admin.networkpagepubliqdaemon:
        class: App\Admin\NetworkPageAdmin
        arguments: [~, App\Entity\NetworkPage, ~, 'publiq_daemon']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Daemon, group: PUBLIQ }
        public: true
    admin.networkpagepubliqdaemonmainnet:
        class: App\Admin\NetworkPageAdmin
        arguments: [~, App\Entity\NetworkPage, ~, 'publiq_daemon_mainnet']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Mainnet, group: PUBLIQ }
        public: true
    admin.networkpagepubliqdaemontestnet:
        class: App\Admin\NetworkPageAdmin
        arguments: [~, App\Entity\NetworkPage, ~, 'publiq_daemon_testnet']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Testnet, group: PUBLIQ }
        public: true
    admin.networkpubliqcontent:
        class: App\Admin\NetworkPubliqContentAdmin
        arguments: [~, App\Entity\NetworkPubliqContent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Contents, group: PUBLIQ }
        public: true
    admin.networkpageshowcase:
        class: App\Admin\NetworkPageAdmin
        arguments: [~, App\Entity\NetworkPage, ~, 'showcase']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Main, group: Showcase }
        public: true
    admin.networkpageshowcaseproject:
        class: App\Admin\NetworkShowcaseProjectAdmin
        arguments: [~, App\Entity\NetworkShowcaseProject, ~, 'showcase']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Projects, group: Showcase }
        public: true
    admin.networkpagebrand:
        class: App\Admin\NetworkPageAdmin
        arguments: [~, App\Entity\NetworkPage, ~, 'brand']
        tags:
            - { name: sonata.admin, manager_type: orm, label: Main, group: Brand }
        public: true
    admin.networkpagebrandlogo:
        class: App\Admin\NetworkBrandLogoContentAdmin
        arguments: [~, App\Entity\NetworkBrandLogoContent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Logo, group: Brand }
        public: true
    admin.networkpagebrandcolour:
        class: App\Admin\NetworkBrandColourContentAdmin
        arguments: [~, App\Entity\NetworkBrandColourContent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Colours, group: Brand }
        public: true
    admin.networkpagebrandtypography:
        class: App\Admin\NetworkBrandTypographyContentAdmin
        arguments: [~, App\Entity\NetworkBrandTypographyContent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Typography, group: Brand }
        public: true
    admin.networkpagebrandcommunication:
        class: App\Admin\NetworkBrandCommunicationContentAdmin
        arguments: [~, App\Entity\NetworkBrandCommunicationContent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Communication, group: Brand }
        public: true
    admin.networksupportcontent:
        class: App\Admin\NetworkSupportContentAdmin
        arguments: [~, App\Entity\NetworkSupportContent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Support, group: Static }
        public: true
